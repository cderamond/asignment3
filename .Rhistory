w{1}
w[1]
w[2]
str(w[2])
outcome[w[2]]
w<- matrix((c(2,11), c(2,17), c(2,23)))
outcome[w[2],]
outcome[unlist(w[2])]
str(outcome[unlist(w[2])])
w<- list(c(2,11), c(2,17), c(2,23))
unlist(w[2])
a<- i==r.outcome
a
?tapply
?split
split(w, a)
split(w, a[which(a==T)])
?lapply
?stop
?next
a<- r.outcome == i
a
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i]) {
unlist(list(i))
break
}
}
}
par(i)
a<- par(i)
a
i
r.outcome <- c("heart attack", "heart failure", "pneumonia") #correct set
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i]) {
unlist(pairs(i))
break
}
}
}
a<- par(i)
par("pneumonia")
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i]) {
unlist(pairs[i])
break
}
}
}
par("pneumonia")
a<- par(i)
i
a<- par("pneumonia")
a
debug(par)
par("pneumonia")
par("pneumonia")
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i]) {
res<-unlist(pairs[i])
break
}
}
res
}
par("pneumonia")
?subset
subset(outcome, State == "NY", c(2,11))
?order
a<-subset(outcome, State == "NY", c(2,11))
a<- a[ order(a$Hospital.Name, na.last = na)]
a<- a[ order(a$Hospital.Name, na.last = NA)]
a<- a[ order(a$Hospital.Name, na.last = NA),]
a
str(a)
a[1 & which(min(a[2], na.rm = T))]
a[1, which(min(a[2], na.rm = T))]
a[ which(min(a[2], na.rm = T))]
min(a[2], na.rm = T)
a[min(a[2], na.rm = T)]
a[min(a[2], na.rm = T), 1]
a[min(a[2], na.rm = T), ]
a[min(a$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = T), ]
min(a[2], na.rm = T)
min(a[2], na.rm = T)
a[min(a$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = T), ]
a[,min(a$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = T)]
a[min(a$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = T),]
?which.max
which.min(a[2])
which.min(a$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
a[115]
a$Hospital.Name[115]
a$Hospital.Name[which.min(a[2])]
a$Hospital.Name[which.min(a[2])]
a$Hospital.Name[which(min(a[2], na.rm = T))]
a[2]
a$Hospital.Name[(min(a[2], na.rm = T))]
a$Hospital.Name[which.min(a[2])]
a$2
str(a)
attributes(a)
a$names
a$Hospital.Name[which.min(a[2,])]
a$Hospital.Name[which.min(a[2])]
which.min(a)
a$Hospital.Name[which.min(as.numeric(a[2])]
a$Hospital.Name[which.min(as.numeric(a[2]))]
min(a[2], na.rm=T)
?min
a$Hospital.Name[a[2] == min(a[2], na.rm= T)]
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & is.na(a[1])]
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a$Hospital.Name[which(a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a$Hospital.Name[which(a[2] == min(a[2], na.rm= T) & !is.na(a[1]),]
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
str(a)
a<- a[ order(a$Hospital.Name, na.last = NA),]
?order
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a<- a[ order(a$Hospital.Name),]
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a
table(a)
a$Hospital.Name[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a[a[2] == min(a[2], na.rm= T) & !is.na(a[1])]
a[a[2] == min(a[2], na.rm= T) & !is.na(a)]
a[which(a[2] == min(a[2], na.rm= T) & !is.na(a[1])),1]
source('~/Coursera/R/assign3/best.R')
outcome <- <- read.csv("outcome-of-care-measures.csv")
outcome <<- read.csv("outcome-of-care-measures.csv")
?<<-
str(outcome)
outcome <<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
help("<<-")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
source('~/Coursera/R/assign3/best.R')
best()
best("NY", "pneumonia")
r.outcome <- c("heart attack", "heart failure", "pneumonia") #correct set
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i]) {
res<-unlist(pairs[i])
break
}
}
res
}
o <- "heart failure"
par(o)
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i] == TRUE) {
res<-unlist(pairs[i])
break
}
}
res
}
source('~/Coursera/R/assign3/best.R')
best()
outcome[11]
outcome[11]<- as.numeric(outcome[11])
outcome[11,]<- as.numeric(outcome[11])
outcome[,11]<- as.numeric(outcome[,11])
source('~/Coursera/R/assign3/best.R')
best()
source('~/Coursera/R/assign3/best.R')
best()
debug(best)
best()
c.data <- c.data[order(c.data$Hospital.Name),] # sorting
st<- data$State[!duplicated(data$State)] #this will get you the list of states
st<- outcome$State[!duplicated(outcome$State)] #this will get you the list of states
p<- "CA"
p<- c("CA", "chile")
p <- p[which(p == st)]
p
p<- c("CA", "chile")
p <- p[p == st]
p<- c("CA", "chile")
p <- p[st == p]
p<- c("CA", "chile")
p==st
st==p
p <- p[st == p & !is.na(p)]
p<- c("CA", "chile")
p <- p[length(which(state == st)) != 0]
p <- p[length(which(p == st)) != 0]
p <- p[which(identical(p,st))]
p
p<- c("CA", "chile")
p <- st[st==p]
p<- c("CA", "chile")
best()
source('~/Coursera/R/assign3/best.R')
best()
best("AL")
?as.numeric
source('~/Coursera/R/assign3/best.R')
best("cl")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
source('~/Coursera/R/assign3/best.R')
best("NY", "pneumonia")
source('~/Coursera/R/assign3/best.R')
best("NY", "pneumonia")
o<- "pneumonia"
r.outcome == o
a<- r.outcome == o
a{1}
1a[1]
a[1]
a[2]
a[3]
best("NY", "pneumonia")
par <- function(dat){
#this will give the vector of columns to retrieve
pairs <-list(c(2,11), c(2,17), c(2,23))
a<- r.outcome == dat
for(i in 1:3) {
if(a[i] == TRUE) {
res<-unlist(pairs[i])
break
}
}
res
}
par("pneumonia")
par("pneumonia ")
par("pneumonia")
par("heart")
par("heart failure")
par("heart attack")
o<-c("pneumonia", "fsdfa")
par(o[1])
par(o)
source('~/Coursera/R/assign3/best.R')
best("NY", "pneumonia")
best("NY", "pneumonia")
best("NY", "pneumonia")
source('~/Coursera/R/assign3/best.R')
source('~/Coursera/R/assign3/best.R')
best("NY", "pneumonia")
best("NY", "Pneumonia")
source('~/Coursera/R/assign3/best.R')
best("NY", "pneumonia")
source('~/Coursera/R/assign3/best.R')
best("NY", "pneumonia")
submit()
submit()
source('~/Coursera/R/assign3/rankhospital.R')
rankhospital()
dat <- rankhospital()
dat
rank(dat, ties.method = "first")
rank(dat, na.last = NA, ties.method = "first")
rank(dat[2], na.last = NA, ties.method = "first")
dat
q <- rank(dat[2], na.last = NA, ties.method = "first")
q
q <- dat[order(rank(dat[2], na.last = NA, ties.method = "first"), na.last = NA),]
q
lenght(q)
length(q)
dim(q)
length(q[1])
q[1]
str(q)
q
q<- cbind(q, rank(dat[2], na.last = NA, ties.method = "first"))
q
str(q)
q<- cbind(q[1:2], "rank"= rank(dat[2], na.last = NA, ties.method = "first"))
str(q)
?last
?tail
q
q[1, min(q[3])]
q[1, which(min(q[3]))]
q[1, min(q[3])]
q[1, min(q$rank)]
q[1, min(q$rank, na.rm = T)]
q[1, q$rank == 1]
q[1, which(q$rank == 1)]
q[, which(q$rank == 1)]
str(q)
Q[3]
q[3]
min(q[3])
max(q[3])
q[min(q[3]),]
q[min(q[3]),]
q[q[3]=1,]
q[q[3]==1,]
q[q[3]==1,1]
q[max(q[3]),]
q[max(as.numeric(q[3]),]
q[max(as.numeric(q[3])),]
subset(q, min(q[3])), 1
subset(q, min(q[3])), 1)
subset(q, which(min(q[3])==q[3]), 1)
subset(q, min(q[3])==q[3], 1)
q
q[min(q[3])==q[3], 1]
q[max(q[3])==q[3], 1]
?return
length(q[3])
dim(q[3])
attributes(q)
source('~/Coursera/R/assign3/rankhospital.R')
rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
source('~/Coursera/R/assign3/rankhospital.R')
rankhospital()
is.na(q)
source('~/Coursera/R/assign3/rankhospital.R')
rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
q <- rankhospital()
q
q<- cbind(q[1:2], "rank"= rank(dat[2], na.last = NA, ties.method = "first"))
str(q)
q<- cbind(q[1:2], "rank"= rank(dat[2], na.last = NA, ties.method = "first"))
?rank
q<- cbind(q[1:2 & !is.na(q)], "rank"= rank(dat[2], na.last = NA, ties.method = "first"))
q
q <- rankhospital()
q<- cbind(q[1:2 & !is.na(q[2])], "rank"= rank(dat[2], na.last = NA, ties.method = "first"))
q <- rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
q <- rankhospital()
q<- cbind(q, "rank"= rank(dat[2], na.last = NA, ties.method = "first"))
q<- cbind(q, "rank"= rank(q[2], na.last = NA, ties.method = "first"))
q<- cbind(q, "rank"= rank(q[2], na.last = T, ties.method = "first"))
q
q <- rankhospital()
q<- q[!is.na(q)]
q <- rankhospital()
q<- q[!is.na(q),]
q
q<- cbind(q, "rank"= rank(q[2], na.last = NA, ties.method = "first"))
q <- rankhospital()
q<- q[which(!is.na(q)),]
q
q <- rankhospital()
q<- q[!is.na(q) == T,]
q <- rankhospital()
q<- q[!is.na(q[2]) == T,]
q
source('~/Coursera/R/assign3/rankhospital.R')
q <- rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
source('~/Coursera/R/assign3/rankhospital.R')
q <- rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
q <- rankhospital()
source('~/Coursera/R/assign3/rankhospital.R')
q <- rankhospital()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/Coursera/R/assign3/rankall.R')
source('~/Coursera/R/assign3/rankall.R')
source('~/Coursera/R/assign3/rankall.R')
q <- rankall()
str(q)
?split
q<- q[!is.na(q[3]), ]
w <- split(q, q[2])
str(w)
?lapply
w$AK[3]
l[3]
w[3]
dim(w)
attributes(w)
lapply
lapply(w, rank())
?vapply
lapply(w, function(x) x <- cbind(x, "rank" = rank(x[3], na.last = NA, ties.method = "first"))
)
best("NY", "heart failure")
source('~/Coursera/R/assign3/best.R')
best("NY", "heart failure")
source('~/Coursera/R/assign3/rankall.R')
q <- rankall()
table(q)
table(unlist(q))
sapply(w, function(x) subset(x, x[4] == 1, 1:2))
w
str(w)
sapply(q, function(x) subset(x, x[4] == 1, 1:2))
e <- apply(q, function(x) subset(x, x[4] == 1, 1:2))
e <- lapply(q, function(x) subset(x, x[4] == 1, 1:2))
str(e)
e <- sapply(q, function(x) subset(x, x[4] == 1, 1:2))
e <- lapply(q, function(x) subset(x, x[4] == 1, 1:2))
e <- sapply(q, function(x) subset(x, x[4] == 1, 1:2))
e <- lapply(q, function(x) subset(x, x[4] == 1, 1:2))
r <- unsplit(e, e[2])
w
str(w)
str(q)
w <- unsplit(q, q[2])
w <- unsplit(q, q[1])
?unsplit
w <- unsplit(q, q$State)
w
q
w <- unsplit(q, q$State)
e
unlist(e)
q <- rankall()
str(q)
e <- lapply(q, function(x) subset(x, x[4] == 1, 1:2))
str(e)
e <- sapply(q, function(x) subset(x, x[4] == 1, 1:2))
str(e)
e <- lapply(q, function(x) subset(x, x[4] == 1, 1:2))
e
table(e)
table(unlist(e))
table(e{1:2})
table(e[1:2])
r <- lapply(r, rbind())
r <- lapply(r, rbind
)
r <- lapply(e, rbind)
r
str(r)
r <- sapply(e, rbind)
r <- unlist(e)
r
str(r)
?tapply
r <- tapply(e, e[2])
e[2]
e[1]
e[0]
str(e)
as.data.frame(e)
r <- as.data.frame(e)
r <- do.call(rbind, e)
str(r)
q
?mapply
source('~/Coursera/R/assign3/rankall.R')
q <- rankall()
w<-lapply(q, function(x) subset(x, x[4] == min(x[4]), 1:2))
w
w<-lapply(q, function(x) subset(x, x[4] == min(x$rank), 1:2))
str(w)
source('~/Coursera/R/assign3/rankall.R')
rankall()
source('~/Coursera/R/assign3/rankall.R')
rankall(num = 2)
submit()
e <- rankall("heart attack", 4)
e
attributes(e)
e$names
?attributes<-
d
?attributes
?names
attributes<-(e, names = c("hospital", "state"))
attributes(e$names) <- c("hospital", "state")
attributes(e) <- e$names = c("hospital", "state")
names(e) <- c("hospital", "state")
names(e)
source('~/Coursera/R/assign3/rankall.R')
sumit()
submit()
submit()
submit()
rankall("heart failure", 10)
